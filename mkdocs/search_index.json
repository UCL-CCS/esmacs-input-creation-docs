{
    "docs": [
        {
            "location": "/",
            "text": "BAC ESMACS Input Creation\n\n\nThe aim of this documentation is to guide the creation of ligand parameterizations and protein-ligand complex models for use in ufBAC.\nIt only covers the single ligand parameterization required for the ESMACS family of protocols.\n\n\nRequirements\n\n\nIn order to run the full workflow you will need access to two software packages:\n\n\n\n\nAmberTools\n (tested using version 14)\n\n\nGaussian\n (tested using Gaussian 09)\n\n\n\n\nAmberTools is free and provided under a GPL license, Gaussian is commercial software.\nIf Gaussian is not available to you, it is possible to use the semi-empirical AM1-BCC methodology.\n\n\nAtomic coordinates of the protein-ligand complex are also required (solvent molecules can also be accomodated).\nFurthermore, the following restrictions apply to these inputs:\n\n\n\n\ncoordinates ust be in PDB format\n\n\nall protein residues \nmust\n be available in the standard Amber forcefield\n\n\nligand must be located in a suitable initial binding pose\n\n\nprotein sequence must be complete with no gaps between residues\n\n\n\n\nOutcomes\n\n\nThis tutorial will run through all the steps needed to prepare protein-ligand system for ESMACS.\nIt details the calculation of appropriate partial charges via Gaussian and the Antechamber tool and production of Amber \nprep\n and \nfrcmod\n files containing the ligand parameterization.\nAdditionally, it details the modified PDB format required by BAC and how to verify your model is suitable for simulation.\nInstructions are then provided on combining the PDB and forcefield files ready for upload to ufBAC.",
            "title": "Home"
        },
        {
            "location": "/#bac-esmacs-input-creation",
            "text": "The aim of this documentation is to guide the creation of ligand parameterizations and protein-ligand complex models for use in ufBAC.\nIt only covers the single ligand parameterization required for the ESMACS family of protocols.",
            "title": "BAC ESMACS Input Creation"
        },
        {
            "location": "/#requirements",
            "text": "In order to run the full workflow you will need access to two software packages:   AmberTools  (tested using version 14)  Gaussian  (tested using Gaussian 09)   AmberTools is free and provided under a GPL license, Gaussian is commercial software.\nIf Gaussian is not available to you, it is possible to use the semi-empirical AM1-BCC methodology.  Atomic coordinates of the protein-ligand complex are also required (solvent molecules can also be accomodated).\nFurthermore, the following restrictions apply to these inputs:   coordinates ust be in PDB format  all protein residues  must  be available in the standard Amber forcefield  ligand must be located in a suitable initial binding pose  protein sequence must be complete with no gaps between residues",
            "title": "Requirements"
        },
        {
            "location": "/#outcomes",
            "text": "This tutorial will run through all the steps needed to prepare protein-ligand system for ESMACS.\nIt details the calculation of appropriate partial charges via Gaussian and the Antechamber tool and production of Amber  prep  and  frcmod  files containing the ligand parameterization.\nAdditionally, it details the modified PDB format required by BAC and how to verify your model is suitable for simulation.\nInstructions are then provided on combining the PDB and forcefield files ready for upload to ufBAC.",
            "title": "Outcomes"
        },
        {
            "location": "/preparation/",
            "text": "The BAC Builder script requires the input PDB structure to follow a particular format.\n\n\n\n\nAll chains to be included in the final model must have coordinates present (BIOMT records, etc. will not be applied)\n\n\nThe sequence must contain unambiguous coordinates for each residue and atom (i.e. no alternative locations or residues)\n\n\nAll hydrogen atoms should be removed\n\n\nChains must contain no gaps and residues numbered sequentially\n\n\nEach chain must have a unique ID and end with a TER card\n\n\nChains must be present in a particular order: protein, ligand, solvent.\n\n\nAll residues included must be compatible with the Amber forcefield. In the case of the ligand, this means that the included version of the coordinates should be those generated during parameterization (to ensure atom names are consistent).\n\n\n\n\nModels for preparation in BAC can come from many sources but a common scenario is that the starting point is a PDB containing coordinates for all components of the system.\nIn this section we detail the steps necessary to create a BAC input PDB from such a model.\nThe PDB \nexample file\n is used as an example to illustrate the general process.\n\n\nIn this example we assume that you begin with a PDB containing all elements of the system.\nWhere multiple ligands are to be added to the same protein receptor then once the protein structure has been prepares once you can skip to the \nligand preparation\n section to create input for parameterization.\n\n\nProtein model\n\n\npdb4amber\n which is part of the AmberTools package (use the \n--help\n flag to view the available options) can be used to help in this process.\n\n\nDisulphide bonds\n\n\nSolvent molecules\n\n\nPrepare ligand for processing\n\n\nChecklist",
            "title": "Initial preparation"
        },
        {
            "location": "/preparation/#protein-model",
            "text": "pdb4amber  which is part of the AmberTools package (use the  --help  flag to view the available options) can be used to help in this process.",
            "title": "Protein model"
        },
        {
            "location": "/preparation/#disulphide-bonds",
            "text": "",
            "title": "Disulphide bonds"
        },
        {
            "location": "/preparation/#solvent-molecules",
            "text": "",
            "title": "Solvent molecules"
        },
        {
            "location": "/preparation/#prepare-ligand-for-processing",
            "text": "",
            "title": "Prepare ligand for processing"
        },
        {
            "location": "/preparation/#checklist",
            "text": "",
            "title": "Checklist"
        },
        {
            "location": "/geometry_optimization/",
            "text": "Antechamber\n\n\nGaussian",
            "title": "Geometry Optimization"
        },
        {
            "location": "/geometry_optimization/#antechamber",
            "text": "",
            "title": "Antechamber"
        },
        {
            "location": "/geometry_optimization/#gaussian",
            "text": "",
            "title": "Gaussian"
        },
        {
            "location": "/parameter_derivation/",
            "text": "ESP format conversion\n\n\nRESP fitting\n\n\nCreate prepi and frcmod files\n\n\nCheck all is well",
            "title": "Parameter Derivation"
        },
        {
            "location": "/parameter_derivation/#esp-format-conversion",
            "text": "",
            "title": "ESP format conversion"
        },
        {
            "location": "/parameter_derivation/#resp-fitting",
            "text": "",
            "title": "RESP fitting"
        },
        {
            "location": "/parameter_derivation/#create-prepi-and-frcmod-files",
            "text": "",
            "title": "Create prepi and frcmod files"
        },
        {
            "location": "/parameter_derivation/#check-all-is-well",
            "text": "",
            "title": "Check all is well"
        },
        {
            "location": "/generate_bac_inputs/",
            "text": "Combine ligand and protein PDBs\n\n\nSolvent\n\n\nAdd header\n\n\nAdditionally, a BAC specific header should be included at the top of the file.\nThis simply contains the number of protein chains included.\n\n\nREMARK   6 PROTEIN CHAINS 1\n\n\n\n\nAs the PDB format is based on columns the \nREMARK   6 PROTEIN CHAINS\n section (up to the figure for the number of protein chains) must be reproduced exactly.\n\n\nOrganize files and create tarball",
            "title": "Generate BAC inputs"
        },
        {
            "location": "/generate_bac_inputs/#combine-ligand-and-protein-pdbs",
            "text": "",
            "title": "Combine ligand and protein PDBs"
        },
        {
            "location": "/generate_bac_inputs/#solvent",
            "text": "",
            "title": "Solvent"
        },
        {
            "location": "/generate_bac_inputs/#add-header",
            "text": "Additionally, a BAC specific header should be included at the top of the file.\nThis simply contains the number of protein chains included.  REMARK   6 PROTEIN CHAINS 1  As the PDB format is based on columns the  REMARK   6 PROTEIN CHAINS  section (up to the figure for the number of protein chains) must be reproduced exactly.",
            "title": "Add header"
        },
        {
            "location": "/generate_bac_inputs/#organize-files-and-create-tarball",
            "text": "",
            "title": "Organize files and create tarball"
        },
        {
            "location": "/testing/",
            "text": "Check PDB for obvious errors\n\n\nChecklist",
            "title": "Testing"
        },
        {
            "location": "/testing/#check-pdb-for-obvious-errors",
            "text": "",
            "title": "Check PDB for obvious errors"
        },
        {
            "location": "/testing/#checklist",
            "text": "",
            "title": "Checklist"
        }
    ]
}