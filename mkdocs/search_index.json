{
    "docs": [
        {
            "location": "/",
            "text": "BAC ESMACS Input Creation\n\n\nThe aim of this documentation is to guide the creation of ligand parameterizations and protein-ligand complex models for use in ufBAC.\nIt only covers the single ligand parameterization required for the ESMACS family of protocols.\n\n\nRequirements\n\n\nIn order to run the full workflow you will need access to two software packages:\n\n\n\n\nAmberTools\n (tested using version 14)\n\n\nGaussian\n (tested using Gaussian 09)\n\n\n\n\nAmberTools is free and provided under a GPL license, Gaussian is commercial software.\nIf Gaussian is not available to you, it is possible to use the semi-empirical AM1-BCC methodology.\n\n\nAtomic coordinates of the protein-ligand complex are also required (solvent molecules can also be accommodated).\nFurthermore, the following restrictions apply to these inputs:\n\n\n\n\ncoordinates must be in PDB format\n\n\nall protein residues \nmust\n be available in the standard Amber forcefield\n\n\nligand must be located in a suitable initial binding pose\n\n\nprotein sequence must be complete with no gaps between residues\n\n\n\n\nIt is assumed throughout that the reader is familiar with the PDB format used to store atomic coordinates.\nWe further suppose that you either have the AmberTools available in your run path or know how to adapt the path used to execute the commands.\n\n\nOutcomes\n\n\nThis tutorial will run through all the steps needed to prepare protein-ligand system for ESMACS.\nIt details the calculation of appropriate partial charges via Gaussian and the Antechamber tool and production of Amber \nprep\n and \nfrcmod\n files containing the ligand parameterization.\nAdditionally, it details the modified PDB format required by BAC and how to verify your model is suitable for simulation.\nInstructions are then provided on combining the PDB and forcefield files ready for upload to ufBAC.",
            "title": "Home"
        },
        {
            "location": "/#bac-esmacs-input-creation",
            "text": "The aim of this documentation is to guide the creation of ligand parameterizations and protein-ligand complex models for use in ufBAC.\nIt only covers the single ligand parameterization required for the ESMACS family of protocols.",
            "title": "BAC ESMACS Input Creation"
        },
        {
            "location": "/#requirements",
            "text": "In order to run the full workflow you will need access to two software packages:   AmberTools  (tested using version 14)  Gaussian  (tested using Gaussian 09)   AmberTools is free and provided under a GPL license, Gaussian is commercial software.\nIf Gaussian is not available to you, it is possible to use the semi-empirical AM1-BCC methodology.  Atomic coordinates of the protein-ligand complex are also required (solvent molecules can also be accommodated).\nFurthermore, the following restrictions apply to these inputs:   coordinates must be in PDB format  all protein residues  must  be available in the standard Amber forcefield  ligand must be located in a suitable initial binding pose  protein sequence must be complete with no gaps between residues   It is assumed throughout that the reader is familiar with the PDB format used to store atomic coordinates.\nWe further suppose that you either have the AmberTools available in your run path or know how to adapt the path used to execute the commands.",
            "title": "Requirements"
        },
        {
            "location": "/#outcomes",
            "text": "This tutorial will run through all the steps needed to prepare protein-ligand system for ESMACS.\nIt details the calculation of appropriate partial charges via Gaussian and the Antechamber tool and production of Amber  prep  and  frcmod  files containing the ligand parameterization.\nAdditionally, it details the modified PDB format required by BAC and how to verify your model is suitable for simulation.\nInstructions are then provided on combining the PDB and forcefield files ready for upload to ufBAC.",
            "title": "Outcomes"
        },
        {
            "location": "/preparation/",
            "text": "The BAC Builder script requires the input PDB structure to follow a particular format.\n\n\n\n\nAll chains to be included in the final model must have coordinates present (BIOMT records, etc. will not be applied)\n\n\nThe sequence must contain unambiguous coordinates for each residue and atom (i.e. no alternative locations or residues)\n\n\nAll hydrogen atoms should be removed\n\n\nChains must contain no gaps and residues numbered sequentially\n\n\nEach chain must have a unique ID and end with a TER card\n\n\nChains must be present in a particular order: protein, ligand, solvent.\n\n\nAll residues included must be compatible with the Amber forcefield. In the case of the ligand, this means that the included version of the coordinates should be those generated during parameterization (to ensure atom names are consistent).\n\n\n\n\nIn addition any ligands will need to be parameterized before they can be simulated.\nIn this section we will prepare the protein and solvent elements of the PDB for incorporation in the starting model and the ligans for parameterization.\n\n\nModels for preparation in BAC can come from many sources but a common scenario is that the starting point is a PDB containing coordinates for all components of the system.\nIn this section we detail the steps necessary to create a BAC input PDB from such a model.\nThe PDB \n4BJX\n is used as an example to illustrate the general process (it can be downloaded from the link for using following along).\n\n\nIn this example we assume that you begin with a PDB containing all elements of the system.\nWhere multiple ligands are to be added to the same protein receptor then once the protein structure has been prepares once you can skip to the \nligand preparation\n section to create input for parameterization.\n\n\nProtein model\n\n\nThe example structure contains a protein, ligand and solvent molecules (see picture below).\nThe first step is to separate the protein chains and ensure they are ready for incorporation in the final model.\n\n\n\n\nBefore proceeding the protein should be checked to ensure that no residues are missing from the chains.\nIf using a file directly from the Protein Databank then the header provides information on missing residues.\nIf not you will have to check manually (using a program such as  \nVMD\n).\n\n\nThe protein model must be extracted from the PDB.\nSimple ways of achieving this in general include the use of protein selections within viewers like VMD or using a text editor.\nIn the case of the 4BJX the protein residues are the only ones provided as \nATOM\n records meaning that a \ngrep\n command (in Linux) can be used to obtain the protein residues alone in a separated PDB:\n\n\ngrep ^ATOM 4bjx.pdb > 4bjx-protein.pdb\n\n\n\n\nTo remove alternative conformers for residues and get a report on any non-standard residues use \npdb4amber\n, part of the AmberTools package:\n\n\npdb4amber -i 4bjx-protein.pdb -o 4bjx-protein-stripped.pdb --nohyd\n\n\n\n\nThis will save the updated coordinates in \n4bjx-protein-stripped.pdb\n and provide a short report to the console about the residues edited. The \n--nohyd\n flag removes hydrogens, you can leave this off if you are confident that the atoms present are correctly names for use in Amber.\n\n\nTHE \nEND\n line at the end of the file should be replaced with \nTER\n (using either a text editor or \nsed\n).\nFor proteins containing multiple chains \nTER\n lines should be inserted between each pair .\n\n\nNon-standard residues\n\n\nNon-standard residues (such as those incorporating post-translation modifications) cannot usually be incorporated in BAC models.\nHowever, if you have Amber \nfrcmod\n and \nlib\n files these can be incorporated in the system description.\n\n\nBiological units\n\n\nNo transforms are applied by BAC Builder so these need to be accounted for before processing of the PDB begins.\n\n\nDisulphide bonds\n\n\nA file, with the suffix '_sslinks', detailing the bonds to be made should be provided by \npdb4amber\n.\nRetain this file as it will be included in the final system description.\n\n\nSolvent molecules\n\n\nAny solvent molecules you wish to be retained in the final model must be extracted from the PDB.\nAgain, this can be done using a variety of methods (VMD, text editor, etc.).\nBAC Builder can only parse a small number of solvent atoms\n\n\n\n\n\n\n\n\nSolvent molecule\n\n\nResidue Name\n\n\n\n\n\n\n\n\n\n\nWater\n\n\nHOH\n\n\n\n\n\n\nMagnesium\n\n\nMG\n\n\n\n\n\n\nZinc\n\n\nZN\n\n\n\n\n\n\nChlorine\n\n\nCL\n\n\n\n\n\n\nSodium\n\n\nNA\n\n\n\n\n\n\n\n\nThe solvent can be extracted from 4BJX using:\n\n\ngrep \" HOH | MG | ZN | CL | NA \" 4bjx.pdb > 4bjx-solvent.pdb\n\n\n\n\nNote: This \ngrep\n command can be dangerous if the ligand contains 'CL' atoms and entries in the element column.\n\n\nPrepare ligand for processing\n\n\nIn order to parameterize the ligand we need to have a separate PDB containing only ligand atoms.\nCreate this PDB using the same tools as for the protein and solvent atoms.\n\n\nThe ligand can be extracted from 4BJX using:\n\n\ngrep \"73B\" 4bjx.pdb | grep HETATM > 4bjx-ligand.pdb\n\n\n\n\nIn the next section we will see how to create a parameterization for the ligand.",
            "title": "Initial preparation"
        },
        {
            "location": "/preparation/#protein-model",
            "text": "The example structure contains a protein, ligand and solvent molecules (see picture below).\nThe first step is to separate the protein chains and ensure they are ready for incorporation in the final model.   Before proceeding the protein should be checked to ensure that no residues are missing from the chains.\nIf using a file directly from the Protein Databank then the header provides information on missing residues.\nIf not you will have to check manually (using a program such as   VMD ).  The protein model must be extracted from the PDB.\nSimple ways of achieving this in general include the use of protein selections within viewers like VMD or using a text editor.\nIn the case of the 4BJX the protein residues are the only ones provided as  ATOM  records meaning that a  grep  command (in Linux) can be used to obtain the protein residues alone in a separated PDB:  grep ^ATOM 4bjx.pdb > 4bjx-protein.pdb  To remove alternative conformers for residues and get a report on any non-standard residues use  pdb4amber , part of the AmberTools package:  pdb4amber -i 4bjx-protein.pdb -o 4bjx-protein-stripped.pdb --nohyd  This will save the updated coordinates in  4bjx-protein-stripped.pdb  and provide a short report to the console about the residues edited. The  --nohyd  flag removes hydrogens, you can leave this off if you are confident that the atoms present are correctly names for use in Amber.  THE  END  line at the end of the file should be replaced with  TER  (using either a text editor or  sed ).\nFor proteins containing multiple chains  TER  lines should be inserted between each pair .",
            "title": "Protein model"
        },
        {
            "location": "/preparation/#non-standard-residues",
            "text": "Non-standard residues (such as those incorporating post-translation modifications) cannot usually be incorporated in BAC models.\nHowever, if you have Amber  frcmod  and  lib  files these can be incorporated in the system description.",
            "title": "Non-standard residues"
        },
        {
            "location": "/preparation/#biological-units",
            "text": "No transforms are applied by BAC Builder so these need to be accounted for before processing of the PDB begins.",
            "title": "Biological units"
        },
        {
            "location": "/preparation/#disulphide-bonds",
            "text": "A file, with the suffix '_sslinks', detailing the bonds to be made should be provided by  pdb4amber .\nRetain this file as it will be included in the final system description.",
            "title": "Disulphide bonds"
        },
        {
            "location": "/preparation/#solvent-molecules",
            "text": "Any solvent molecules you wish to be retained in the final model must be extracted from the PDB.\nAgain, this can be done using a variety of methods (VMD, text editor, etc.).\nBAC Builder can only parse a small number of solvent atoms     Solvent molecule  Residue Name      Water  HOH    Magnesium  MG    Zinc  ZN    Chlorine  CL    Sodium  NA     The solvent can be extracted from 4BJX using:  grep \" HOH | MG | ZN | CL | NA \" 4bjx.pdb > 4bjx-solvent.pdb  Note: This  grep  command can be dangerous if the ligand contains 'CL' atoms and entries in the element column.",
            "title": "Solvent molecules"
        },
        {
            "location": "/preparation/#prepare-ligand-for-processing",
            "text": "In order to parameterize the ligand we need to have a separate PDB containing only ligand atoms.\nCreate this PDB using the same tools as for the protein and solvent atoms.  The ligand can be extracted from 4BJX using:  grep \"73B\" 4bjx.pdb | grep HETATM > 4bjx-ligand.pdb  In the next section we will see how to create a parameterization for the ligand.",
            "title": "Prepare ligand for processing"
        },
        {
            "location": "/geometry_optimization/",
            "text": "The next stage will require that any hydrogens which are part of the ligand are added (these are usually not resolved in crystal structures).\nAmberTools provides a tool for estimating the protonation of ligands called reduce.\nTo use this tool on the example 4BJX ligand extracted in the last section use the command:\n\n\nreduce 4bjx-ligand.pdb > 4bjx-ligand-h.pdb\n\n\n\n\nA wide variety of other ways to add these atoms are possible, one popular option in \nOpenBabel\n.\n\n\nInitial steps using Antechamber\n\n\nAntechamber is designed to allow the rapid generation of topology files for ligands using the generalized Amber force field (GAFF).\nTwo charge methods can be used HF/6-31G\n RESP or AM1-BCC.\nThe work conducted to date with BAC has focussed on the HF/6-31G\n RESP method used to parameterize much of the main Amber forcefield.\nIt is this approach that we will be detailing in the next two sections, although we will briefly mention the command used to complete the AM1-BCC approach as this eliminated the need for time consuming Gaussian calculations.\n\n\nThe first step to using Antechamber in this context is to generate the input file for Gaussian to optimize the ligand and generate a quantum-chemically calculated electrostatic potential.\n\n\nFor neutral ligands it is sufficient to specify only the input PDB (\n-fi\n specifies the format and \n-i\n the filename) and the output file (\n-fo\n specifies the format and \n-o\n the filename):\n\n\nantechamber -fi pdb -fo gcrt -i 4bjx-ligand-h.pdb -o 4bjx-ligand.gau\n\n\n\n\nIf the ligand is charged and extra option for the net charge, \n-nc\n, must be used.\nFor example if we thought the ligand had a charge of +1 we would use:\n\n\nantechamber -fi pdb -fo gcrt -i 4bjx-ligand-h.pdb -o 4bjx-ligand.gau -nc 1\n\n\n\n\nThe first few lines of the Gaussian input file generated will look something like this:\n\n\n--Link1--\n%chk=molecule\n#HF/6-31G* SCF=tight Test Pop=MK iop(6/33=2) iop(6/42=6) opt\n\nremark line goes here\n\n0   1\n    C   15.0320000000        6.0240000000       10.0040000000     \n    C   14.0090000000        5.1520000000        9.2570000000     \n    C   14.6530000000        4.2700000000        8.1860000000\n\n\n\n\nThe meaning of the Gaussian options, found in the third line, are as follows:\n\n\n\n\nOpt: We ask for optimization of our structure\n\n\nHF/6-31G*: We are using the 6-31G* basis set\n\n\nPop=MK: The output will contain Merz-Kollman atomic charges (fitted to the electrostatic potential)\n\n\niop(6/33=2): Output grid of values of describing the electrostatic potentail.\nThis will used in the latter RESP step to create the partial charges used in the final parameterization.\n\n\n\n\nThe values on line 7 are the net charge and the multiplicity.\n\n\nNon-standard approach (using AM1-BCC)\n\n\nThis section is something of an aside and is included for completeness only, skip if you are only interested in creating standard BAC parameterizations.\nIf you wish to create the topology without Gaussian optimization and using the AM1-BCC approach to charges this can be achieved with a single command:\n\n\nantechamber -i 4bjx-ligand-h.pdb -fi pdb -o l01.prep -fo prepi -c bcc -at gaff -j 4 -rn L01\n\n\n\n\nHere the ligand is renamed 'L01'.\n\n\nIf you use this approach you can skip the section below on Gaussian and the next Antechamber step and move straight to the \nBAC input generation\n section.\n\n\nGeometry optimization (Gaussian)\n\n\nTo run the geometry optimization in Gaussian and obtain the electrostatic potential it is a simple Gaussian run.\nIn principle this can be achieved using the command (for Gaussian 09):\n\n\ng09 < 4bjx-ligand.gau > 4bjx-ligand.out\n\n\n\n\nHowever, this process can take a long time and it is recommended that the job is executed using a batch system. The details of executing that run will be dependent on your system setup.\n\n\nIn the next section we will use the electrostatic potential to generate partial charges for our ligand.",
            "title": "Geometry Optimization"
        },
        {
            "location": "/geometry_optimization/#initial-steps-using-antechamber",
            "text": "Antechamber is designed to allow the rapid generation of topology files for ligands using the generalized Amber force field (GAFF).\nTwo charge methods can be used HF/6-31G  RESP or AM1-BCC.\nThe work conducted to date with BAC has focussed on the HF/6-31G  RESP method used to parameterize much of the main Amber forcefield.\nIt is this approach that we will be detailing in the next two sections, although we will briefly mention the command used to complete the AM1-BCC approach as this eliminated the need for time consuming Gaussian calculations.  The first step to using Antechamber in this context is to generate the input file for Gaussian to optimize the ligand and generate a quantum-chemically calculated electrostatic potential.  For neutral ligands it is sufficient to specify only the input PDB ( -fi  specifies the format and  -i  the filename) and the output file ( -fo  specifies the format and  -o  the filename):  antechamber -fi pdb -fo gcrt -i 4bjx-ligand-h.pdb -o 4bjx-ligand.gau  If the ligand is charged and extra option for the net charge,  -nc , must be used.\nFor example if we thought the ligand had a charge of +1 we would use:  antechamber -fi pdb -fo gcrt -i 4bjx-ligand-h.pdb -o 4bjx-ligand.gau -nc 1  The first few lines of the Gaussian input file generated will look something like this:  --Link1--\n%chk=molecule\n#HF/6-31G* SCF=tight Test Pop=MK iop(6/33=2) iop(6/42=6) opt\n\nremark line goes here\n\n0   1\n    C   15.0320000000        6.0240000000       10.0040000000     \n    C   14.0090000000        5.1520000000        9.2570000000     \n    C   14.6530000000        4.2700000000        8.1860000000  The meaning of the Gaussian options, found in the third line, are as follows:   Opt: We ask for optimization of our structure  HF/6-31G*: We are using the 6-31G* basis set  Pop=MK: The output will contain Merz-Kollman atomic charges (fitted to the electrostatic potential)  iop(6/33=2): Output grid of values of describing the electrostatic potentail.\nThis will used in the latter RESP step to create the partial charges used in the final parameterization.   The values on line 7 are the net charge and the multiplicity.",
            "title": "Initial steps using Antechamber"
        },
        {
            "location": "/geometry_optimization/#non-standard-approach-using-am1-bcc",
            "text": "This section is something of an aside and is included for completeness only, skip if you are only interested in creating standard BAC parameterizations.\nIf you wish to create the topology without Gaussian optimization and using the AM1-BCC approach to charges this can be achieved with a single command:  antechamber -i 4bjx-ligand-h.pdb -fi pdb -o l01.prep -fo prepi -c bcc -at gaff -j 4 -rn L01  Here the ligand is renamed 'L01'.  If you use this approach you can skip the section below on Gaussian and the next Antechamber step and move straight to the  BAC input generation  section.",
            "title": "Non-standard approach (using AM1-BCC)"
        },
        {
            "location": "/geometry_optimization/#geometry-optimization-gaussian",
            "text": "To run the geometry optimization in Gaussian and obtain the electrostatic potential it is a simple Gaussian run.\nIn principle this can be achieved using the command (for Gaussian 09):  g09 < 4bjx-ligand.gau > 4bjx-ligand.out  However, this process can take a long time and it is recommended that the job is executed using a batch system. The details of executing that run will be dependent on your system setup.  In the next section we will use the electrostatic potential to generate partial charges for our ligand.",
            "title": "Geometry optimization (Gaussian)"
        },
        {
            "location": "/parameter_derivation/",
            "text": "Now that the electrostatic potential is known we need to use this to produce a ligand description for incorporation into the Amber force field.\n\n\nRESP fitting\n\n\nOnce the electrostatic potential has been successfully generated a two step process is used to convert this into RESP fitted charges.\nIn these commands the new options are; \n-c\n charge method and \ncf\n for charge filename. The '.ac' file is an intermediate file and most options are selct explanatory, except \n-c wc\n which simply means 'write out charge'.\n\n\nantechamber -fi gout -fo ac -i 4bjx-ligand.out -o resp.ac -c resp\nantechamber -fi ac -i resp.ac -c wc -cf resp.crg\n\n\n\n\nCreate prep and frcmod files\n\n\nThe goal of the parameterization is to create two files used by Amber to read a a paremeterized drug.\nThe first is a \n.prep\n file which adds a new residues to the standard Amber residue database.\nThe other is a force field parameter modification, or \n.frcmod\n, file which lists parameters for bonds and other components of the forcefield that need to be added to characterize the ligand.\n\n\nAt this stage you need to consider a name for the ligand to be used in the simulation.\nThe residue name must be 3 characters long, in this example we use 'L01'.\nBAC requires that this name in lowercase letters \nmust\n be used consistently throughout the rest of the process to name all files associated with the ligand (for instance the \nl01.prep\n file generated below).\n\n\nantechamber -i resp.ac -fi ac -c rc -cf resp.crg -o l01.prep -fo prepi -ao name -a 4bjx-ligand-h.pdb -fa pdb -rn L01\n\n\n\n\nIn this command, \n-a\n sets and additional file to be read for naming, \n-ao name\n means that only atom names are read from the input (rather than also including atom and bond types) and \n-rn L01\n sets the residue name.\n\n\nNow we have the \n.prep\n file we need to use Antechamber to try and fill in any missing parameters in the force field by analogy to similar parameters which are present.\nIf Antechamber can't empirically calculate a value or has no analogy it will either add a default value that it thinks is reasonable or , in rare cases, insert a place holder.\nThis will contain zeros in all columns and be accompanied by the comment \"ATTN: needs revision\" in the output.\nIn these circumstances you will have to manually add these parameters.\n\n\nparmchk -i l01.prep -f prepi -o l01.frcmod\n\n\n\n\nFinally we need to produce a PDB which contains the ligand labelled using the new name we have given it.\nAn easy way of achieving this is to run the command:\n\n\nsed 's/73B/L01/' 4bjx-ligand-h.pdb > l01.pdb\n\n\n\n\nRemove any header lines from the resultant PDB (\nreduce\n adds one beginning 'USER  MOD').\n\n\nFor use in BAC the ligand PDB (\nl01.pdb\n in the example) should be checked to ensure that it does not contain entries in the element column.\nIn particular entries for chlorine can be a problem.\n\n\nCheck all is well\n\n\ntest.leapin\n\n\nsource leaprc.gaff\nfrcmod = loadamberparams l01.frcmod\nloadamberprep l01.prep\nmol = loadpdb l01.pdb\nsaveamberprep mol test.prepc\nsaveamberparm mol test.top test.crd\nsavepdb mol test.pdb\nquit\n\n\n\n\nA common reason for failure is that some atom names change capitalization in the Antechamber process (in particular 'CL' becoming 'Cl' and 'BR' turning into 'Br').\nIt is easiest to change the case in the PDB as the entries only appear once (as opposed to the \n.prep\n file where they appear in atom and connectivity lines).",
            "title": "Parameter Derivation"
        },
        {
            "location": "/parameter_derivation/#resp-fitting",
            "text": "Once the electrostatic potential has been successfully generated a two step process is used to convert this into RESP fitted charges.\nIn these commands the new options are;  -c  charge method and  cf  for charge filename. The '.ac' file is an intermediate file and most options are selct explanatory, except  -c wc  which simply means 'write out charge'.  antechamber -fi gout -fo ac -i 4bjx-ligand.out -o resp.ac -c resp\nantechamber -fi ac -i resp.ac -c wc -cf resp.crg",
            "title": "RESP fitting"
        },
        {
            "location": "/parameter_derivation/#create-prep-and-frcmod-files",
            "text": "The goal of the parameterization is to create two files used by Amber to read a a paremeterized drug.\nThe first is a  .prep  file which adds a new residues to the standard Amber residue database.\nThe other is a force field parameter modification, or  .frcmod , file which lists parameters for bonds and other components of the forcefield that need to be added to characterize the ligand.  At this stage you need to consider a name for the ligand to be used in the simulation.\nThe residue name must be 3 characters long, in this example we use 'L01'.\nBAC requires that this name in lowercase letters  must  be used consistently throughout the rest of the process to name all files associated with the ligand (for instance the  l01.prep  file generated below).  antechamber -i resp.ac -fi ac -c rc -cf resp.crg -o l01.prep -fo prepi -ao name -a 4bjx-ligand-h.pdb -fa pdb -rn L01  In this command,  -a  sets and additional file to be read for naming,  -ao name  means that only atom names are read from the input (rather than also including atom and bond types) and  -rn L01  sets the residue name.  Now we have the  .prep  file we need to use Antechamber to try and fill in any missing parameters in the force field by analogy to similar parameters which are present.\nIf Antechamber can't empirically calculate a value or has no analogy it will either add a default value that it thinks is reasonable or , in rare cases, insert a place holder.\nThis will contain zeros in all columns and be accompanied by the comment \"ATTN: needs revision\" in the output.\nIn these circumstances you will have to manually add these parameters.  parmchk -i l01.prep -f prepi -o l01.frcmod  Finally we need to produce a PDB which contains the ligand labelled using the new name we have given it.\nAn easy way of achieving this is to run the command:  sed 's/73B/L01/' 4bjx-ligand-h.pdb > l01.pdb  Remove any header lines from the resultant PDB ( reduce  adds one beginning 'USER  MOD').  For use in BAC the ligand PDB ( l01.pdb  in the example) should be checked to ensure that it does not contain entries in the element column.\nIn particular entries for chlorine can be a problem.",
            "title": "Create prep and frcmod files"
        },
        {
            "location": "/parameter_derivation/#check-all-is-well",
            "text": "test.leapin  source leaprc.gaff\nfrcmod = loadamberparams l01.frcmod\nloadamberprep l01.prep\nmol = loadpdb l01.pdb\nsaveamberprep mol test.prepc\nsaveamberparm mol test.top test.crd\nsavepdb mol test.pdb\nquit  A common reason for failure is that some atom names change capitalization in the Antechamber process (in particular 'CL' becoming 'Cl' and 'BR' turning into 'Br').\nIt is easiest to change the case in the PDB as the entries only appear once (as opposed to the  .prep  file where they appear in atom and connectivity lines).",
            "title": "Check all is well"
        },
        {
            "location": "/generate_bac_inputs/",
            "text": "Combine component PDBs\n\n\nAs noted earlier BAC expects the PDB to have a set structure - protein, lgand and then solvent.\nIt also expects \nTER\n cards between chains.\n\n\nBe careful to ensure that any \nEND\n cards only appear as the very last line of the file.\n\n\nAdd header\n\n\nAdditionally, a BAC specific header should be included at the top of the file.\nThis simply contains the number of protein chains included.\n\n\nREMARK   6 PROTEIN CHAINS 1\n\n\n\n\nAs the PDB format is based on columns the \nREMARK   6 PROTEIN CHAINS\n section (up to the figure for the number of protein chains) must be reproduced exactly.\n\n\nOrganize files and create tarball\n\n\nmkdir l01\n\n\n\n\nCopy the \n.frcmod\n and \nprep files\n into this directory.\n\n\ncp l01.frcmod l01\ncp l01.prep l01\n\n\n\n\nFinally, we create a tarball containing the directory we created:\n\n\ntar cfv bet-l01.tar l01\n\n\n\n\nThe two inputs needed for use in the ufBAC are thus the full system PDB (\nbet-l01.pdb\n) and this tarball of the ligand parameterization (\nbet-l01.tar\n).",
            "title": "Generate BAC inputs"
        },
        {
            "location": "/generate_bac_inputs/#combine-component-pdbs",
            "text": "As noted earlier BAC expects the PDB to have a set structure - protein, lgand and then solvent.\nIt also expects  TER  cards between chains.  Be careful to ensure that any  END  cards only appear as the very last line of the file.",
            "title": "Combine component PDBs"
        },
        {
            "location": "/generate_bac_inputs/#add-header",
            "text": "Additionally, a BAC specific header should be included at the top of the file.\nThis simply contains the number of protein chains included.  REMARK   6 PROTEIN CHAINS 1  As the PDB format is based on columns the  REMARK   6 PROTEIN CHAINS  section (up to the figure for the number of protein chains) must be reproduced exactly.",
            "title": "Add header"
        },
        {
            "location": "/generate_bac_inputs/#organize-files-and-create-tarball",
            "text": "mkdir l01  Copy the  .frcmod  and  prep files  into this directory.  cp l01.frcmod l01\ncp l01.prep l01  Finally, we create a tarball containing the directory we created:  tar cfv bet-l01.tar l01  The two inputs needed for use in the ufBAC are thus the full system PDB ( bet-l01.pdb ) and this tarball of the ligand parameterization ( bet-l01.tar ).",
            "title": "Organize files and create tarball"
        },
        {
            "location": "/testing/",
            "text": "Check PDB for obvious errors\n\n\nChecklist",
            "title": "Testing"
        },
        {
            "location": "/testing/#check-pdb-for-obvious-errors",
            "text": "",
            "title": "Check PDB for obvious errors"
        },
        {
            "location": "/testing/#checklist",
            "text": "",
            "title": "Checklist"
        }
    ]
}